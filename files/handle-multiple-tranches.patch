From ea70449fd94b5f866ea6189bf4f41f7c230cccfa Mon Sep 17 00:00:00 2001
From: Erik Kurzinger <ekurzinger@nvidia.com>
Date: Fri, 14 Jul 2023 13:43:43 -0700
Subject: [PATCH] egl-wayland: handle multiple tranches for the same device

To determine the set of format modifiers to use when creating a surface
we will find the first tranche for our DRM device, or else the
compositor's main device, and then look for our DRM format in that
tranche's list of formats to find the modifier list. If our format is
not in the list, then we won't use explicit modifiers when creating the
surface.

However, some compositors will advertise multiple tranches for a given
DRM device with a different set of formats in each one. Kwin is one
example. In that case, the tranche we select above might not contain our
format, but it could still be in one of the other tranches for the same
device.

Instead of simply picking the first tranche for the desired device, with
this change we will loop over the format list of each of that device's
tranches until we find a tranche that contains the format we want.
---
 src/wayland-eglsurface.c | 20 +++++++++++++-------
 1 file changed, 13 insertions(+), 7 deletions(-)

diff --git a/src/wayland-eglsurface.c b/src/wayland-eglsurface.c
index 7b9ddd7..cd8ed1e 100644
--- a/src/wayland-eglsurface.c
+++ b/src/wayland-eglsurface.c
@@ -1265,12 +1265,18 @@ EGLint wlEglHandleImageStreamEvents(WlEglSurface *surface)
 }
 
 static WlEglDmaBufFormatSet *
-WlEglGetFormatSetForDev(WlEglDmaBufFeedback *feedback, dev_t dev)
+WlEglGetFormatSetForDev(WlEglDmaBufFeedback *feedback, dev_t dev, uint32_t format)
 {
     /* find the dev_t in our feedback's list of tranches */
     for (int i = 0; i < (int)feedback->numTranches; i++) {
         if (feedback->tranches[i].drmDev == dev) {
-            return &feedback->tranches[i].formatSet;
+            /* check if this tranche contains our format */
+            WlEglDmaBufFormatSet *formatSet = &feedback->tranches[i].formatSet;
+            for (int j = 0; j < (int)formatSet->numFormats; ++j) {
+                if (formatSet->dmaBufFormats[j].format == format) {
+                    return formatSet;
+                }
+            }
         }
     }
 
@@ -1354,7 +1360,7 @@ static EGLint create_surface_stream_local(WlEglSurface *surface)
     EGLint err = EGL_SUCCESS;
     EGLint numModifiers = 0;
     EGLuint64KHR *modifiers = NULL;
-    EGLint format;
+    uint32_t format;
     WlEglDmaBufFormatSet *formatSet = NULL;
     WlEglDmaBufFeedback *feedback = NULL;
 
@@ -1395,10 +1401,10 @@ static EGLint create_surface_stream_local(WlEglSurface *surface)
                 feedback = &display->defaultFeedback;
             }
 
-            formatSet = WlEglGetFormatSetForDev(feedback, display->devDpy->dev);
+            formatSet = WlEglGetFormatSetForDev(feedback, display->devDpy->dev, format);
             if (!formatSet) {
                 /* try again and see if there is a matching tranche for the render node */
-                formatSet = WlEglGetFormatSetForDev(feedback, display->devDpy->renderNode);
+                formatSet = WlEglGetFormatSetForDev(feedback, display->devDpy->renderNode, format);
             }
 
             /*
@@ -1407,14 +1413,14 @@ static EGLint create_surface_stream_local(WlEglSurface *surface)
              * us to check if the main device supports the linear modifier.
              */
             if (!formatSet && display->primeRenderOffload) {
-                formatSet = WlEglGetFormatSetForDev(feedback, feedback->mainDev);
+                formatSet = WlEglGetFormatSetForDev(feedback, feedback->mainDev, format);
             }
         }
 
         /* grab the modifier array */
         if (formatSet) {
             for (int i = 0; i < (int)formatSet->numFormats; i++) {
-                if (formatSet->dmaBufFormats[i].format == (uint32_t)format) {
+                if (formatSet->dmaBufFormats[i].format == format) {
                     modifiers = formatSet->dmaBufFormats[i].modifiers;
                     numModifiers = formatSet->dmaBufFormats[i].numModifiers;
                     break;
